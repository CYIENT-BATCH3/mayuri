// 3....Write a c program to read file contents and display on console
/*READ file
1.start
2.using file pointer read the contents of the file
3.print the content on the console
*/
#include<stdio.h>//including header file
int main()
{
setbuf(stdout,NULL);//for printing the output in the console
char ch;//declaring variable
FILE *fp=fopen(__FILE__,"r");//declaring file pointer and opening the current executing file using __FILE__ macro
ch=fgetc(fp);//reading the contents in the file
do{
putchar(ch);//printning the character
	ch=fgetc(fp);//reading the next character

}while(ch!=EOF);//iterates upto EOF
fclose(fp);//closing file

}
============================================================
/* 4.
WRITE file
1.start
2.read the contents
3.strore the contents in an array
4.write the content in file
*/

#include<stdio.h>
int main()
{
	setbuf(stdout,NULL);
	FILE *fp=fopen("C:\\Users\\re69829\\Downloads\\ask.txt","w");//declaring file pointer and opening file for write mode
       if(fp==NULL)//checking if the file is found or not
          {
          printf("file not found");
          }
       else
       {
	      char as[60];//declaring string
	      printf("enter the content to write\n");
	      scanf("%[^\n]s",as);//using selective scanf read string
	      fprintf(fp,"%s",as);//using fprintf printning the contents in the file
        fclose(fp);//closing file

       }
}
===========================================================
/*5. STUDENT STRUCT
start
create structure with three members
input details and print the datails
*/
#include<stdio.h>

struct studentdata//declaring stucture
{
char stu_name[30];//declaring structure member
int stu_id,stu_age;//declaring structure member
};
void print_details(struct studentdata *);//function prototype declaring
void read_data(struct studentdata *s);//function prototype declaring
int main()
{
  setbuf(stdout,NULL);
  struct studentdata s[5];//declaring array of 5 structures

read_data(s);//calling read_data function
print_details(s);//calling print_detailsfunction
}
void read_data(struct studentdata *s)//defining function
{
	for(int i=0;i<5;i++)
	{
     printf("enter student %d name\n",i+1);
     scanf("%s",s[i].stu_name);//reading name
     printf("enter student %d age\n",i+1);
     scanf("%d",&s[i].stu_age);//reading age
     printf("enter student %d id\n",i+1);
     scanf("%d",&s[i].stu_id);//reading id
	}
}
void print_details(struct studentdata *s)//defining function
	{
		for(int i=0;i<5;i++)
		{
	     printf("\nstudent %d name is %s",i+1,s[i].stu_name);//printning name

	     printf("\nstudent %d age is %d",i+1,s[i].stu_age);//printning age

	     printf("\n student %d id is %d\n",i+1,s[i].stu_id);//printning id

		}
}
====================================================================
/* 6. SQUARE
1.start
2.define macro for finding square
3.printning the result
*/
#include <stdio.h>
#define square(num) (num*num)//defining macro
int main()
{
    int num;//declaring num
    printf("enter a number\n");
    scanf("%d",&num);//reading number
    printf("\nthe square of %d is %d",num,square(num));//printning the square
    return 0;
}
===========================================================
/* 7.FUNCTION POINTERS
ALGORITHM
 * 1.declare functions with pointer arguments
 * 2.In main declare 2 integer variables
 * 3.now with function call pass the address of the variables
 * not in function definition perform add and sub operations
 * print the results
 */
#include<stdio.h>   //preprocessor directive to include standard input output
int add_function(int *a,int *b);  //add function declaration
int sub_function(int *a,int *b);  //sub function declaration
int main()     //main function
{
	setbuf(stdout,NULL);
	int number1,number2;    //declaring variables
	printf("ENTER THE NUMBERS TO PERFORM OPERATION\n");
	scanf("%d%d",&number1,&number2);    //reading inputs from the keyboard
	add_function(&number1,&number2);   // function call
	sub_function(&number1,&number2);   //function call
	return 0;
}
int add_function(int *a,int *b)    //function definition
{
	int sum;    // declaring variable to store the result
	sum=*a+*b;
	printf("SUM IS:%d\n",sum);    //printing the result
	return 0;
}
int sub_function(int *a,int *b)       //function declaration
{
	int sub;   //declaring variable to store result
	sub=*a-*b;
	printf("SUB IS:%d\n",sub);     //printing the result
	return 0;

}
========================================================
/* 8.SEARCH ARRAY
 * create an array size of 10.
 * insert elements into the array.
 * print array before the operations.
 * enter a number to search in array
 * if number found print the number with the position.
 * else print number doesn't exist in array.
 *
 */
#include<stdio.h>//header files
void found();//function decleration of descending order
int array[50];//declaring arary of size 50
int size,i,j,src; //global variables
int main()//execution starts from here
{
	setbuf(stdout,NULL);//initially the buffer is set to null
	printf("Input size of array:");//asking user to enter the size
	scanf("%d",&size);//reading the input from user
	printf("Enter array elements:");//printing
	for(int i=0;i<size;i++)
	{
		scanf("%d",&array[i]);//reading the array elements from user
	}
	printf("Input array elements:");
	for(int i=0;i<size;i++)
	{
		printf("%d",array[i]);//printing the array elements from user
		if(i<size-1)
		{
			printf(",");//to print the comma(,)
		}
	}
	found();
}
void found()
{
	int *p;//declaring a pointer
	int count=0;
	int pos=0;
	printf("\nenter the number want to search in array:");//asking user for number to search
	scanf("%d",&src);//reading numbr and stored into src
	p=&src;//passing the address of the value into pointer
	for(i=0;i<size;i++)
	{
		if(array[i]==*p)//if condition matches count increses
		{
			count=1;
			pos=i+1;
		}
	}

	if(count==1)//if count is equal to 1 print the number and the position
	{
		printf("%d is found at %d position",src,pos);
	}
	else
	{
		printf("%d does not exists in array",src);
	}


}
=========================================================
/* 9. ASC DSC ARRAY
 * create an array size of 10.
 * insert elements into the array.
 * print array before the operations.
 * perform asscending order and descending order.
 * print elements before and after operation.
 *
 */
#include<stdio.h>//header files
void ASC();//function decleration of ascending order
void DSC();//function decleration of descending order
int array[50];//declaring arary of size 50
int size,i,j; //global variables
int main()//execution starts from here
{
	setbuf(stdout,NULL);//initially the buffer is set to null
	printf("Input size of array:");//asking user to enter the size
	scanf("%d",&size);//reading the input from user
	printf("Enter array elements:");//printing
	for(int i=0;i<size;i++)
	{
		scanf("%d",&array[i]);//reading the array elements from user
	}
	printf("Input array elements:");
	for(int i=0;i<size;i++)
	{
		printf("%d",array[i]);//printing the array elements from user
		if(i<size-1)
		{
			printf(",");//to print the comma(,)
		}
	}
	 ASC(array);//function call for ascending
	 DSC(array);//function call for descending
}
void ASC(int asc[size])//function defination
{
    int temp;//temperorry storage elements
	for (int i = 0; i < size; i++)
	        {
                for (int j = i + 1; j < size; j++)
	            {
	                if (array[i] > array[j])//comparing twom elements in a array
	                {
	                    temp =  array[i];//assigning value1 to temp
	                    array[i] = array[j];//assigning value2 to i
	                    array[j] = temp; //temp is assiging to j
	                }
	            }
	        }
	 printf("\nArray sorted in ascending order:");
	        for (i = 0; i <=size-1; ++i)
	        {
	        	printf("%d",array[i]);//printing sorted array
	        	if(i<size-1)
	        	{
	               	printf(",");
	           	}
	        }
}
void DSC(int dsc[size])
{
    int temp;
	for (int i = 0; i < size; i++)
	        {
	            for (int j = i + 1; j < size; j++)
	            {
	                if (array[i] < array[j])//condition
	                {
	                    temp =  array[i];
	                    array[i] = array[j];
	                    array[j] = temp;
	                }
	            }
	        }
	 printf("\nArray sorted in ascending order:");
	 for (i = 0; i <= size-1; ++i)
	        {
	        	printf("%d",array[i]);//printing sorted array
	        	if(i<size-1){
	        	printf(",");
	        	}
	        }
}
===================================================================